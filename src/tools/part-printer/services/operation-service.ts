/**
 * Service Operation - Extraction des donn√©es d'op√©rations
 * 
 * Phase 3.1 - Extraction Operation No 10
 * 
 * Endpoint IFS: OperationBlockHandling.svc/Reference_ShopOrderOperation
 * 
 * Donn√©es extraites :
 * - OperationBlockId de l'op√©ration 10 (peut √™tre null)
 * - Raw Material (√† r√©cup√©rer via MaterialHandling - TODO Phase 3.2)
 * 
 * Documentation compl√®te : /docs/api/operation-block/README.md
 */

import { getIFSClient } from '@/shared/services/ifs-client'
import type { IFSODataResponse } from '@/shared/types/ifs'

/**
 * Interface pour une op√©ration IFS
 * Source: OperationBlockHandling.svc/Reference_ShopOrderOperation
 */
export interface IFSOperation {
  OrderNo: string
  ReleaseNo: string
  SequenceNo: string
  OperationNo: number
  OpId: string // Operation ID (unique identifier)
  OperationBlockId: string | null // ‚ö†Ô∏è IMPORTANT: Peut √™tre null (valeur valide)
  OperationDescription?: string
  WorkCenterNo?: string
}

/**
 * Interface pour une ligne de composant (Material Line)
 */
export interface IFSMaterialLine {
  OrderNo: string
  ReleaseNo: string
  SequenceNo: string
  OperationNo: number
  LineItemNo: number
  PartNo: string // Raw Material Part Code
  Qty?: number
  QtyPerAssembly?: number
  QtyRequired?: number
}

/**
 * Donn√©es de l'op√©ration 10 enrichies
 */
export interface Operation10Data {
  orderNo: string
  releaseNo: string
  sequenceNo: string
  operationNo: number
  
  // ‚ö†Ô∏è TEMPORAIRE (AST/Dev) : opId utilis√© comme fallback pour Block ID
  // TODO PRODUCTION : Utiliser uniquement blockId quand disponible en PROD
  opId: string // Operation ID (unique identifier) - Utilis√© temporairement en AST
  
  // ‚ö†Ô∏è TEMPORAIRE (AST/Dev) : blockId peut √™tre null ou OpId
  // TODO PRODUCTION : Remplacer par le vrai OP 10 Block ID quand disponible en PROD
  // En AST (Dev), le Block ID n'est pas disponible, on utilise OpId temporairement
  blockId: string | null // ‚ö†Ô∏è IMPORTANT: Peut √™tre null (valeur valide)
  
  rawMaterial: string // Part code de la premi√®re ligne de composant
}

/**
 * R√©cup√©rer le Raw Material d'un Shop Order (Material Line OP10)
 * 
 * Utilise la navigation OData MaterialArray sur ShopOrds
 * 
 * @param orderNo - Num√©ro d'ordre
 * @param releaseNo - Num√©ro de release
 * @param sequenceNo - Num√©ro de s√©quence
 * @returns Part code du Raw Material (premi√®re ligne de composant OP10)
 */
async function getRawMaterial(
  orderNo: string,
  releaseNo: string,
  sequenceNo: string
): Promise<string> {
  console.log(`üè≠ [Operation Service] R√©cup√©ration Raw Material (OP10) pour ${orderNo}`)

  try {
    const client = getIFSClient()

    // R√©cup√©rer les Material Lines de l'op√©ration 10
    const materialResponse = await client.get<IFSODataResponse<IFSMaterialLine>>(
      `ShopOrderHandling.svc/ShopOrds(OrderNo='${orderNo}',ReleaseNo='${releaseNo}',SequenceNo='${sequenceNo}')/MaterialArray`,
      {
        $filter: 'OperationNo eq 10',
        $select: 'LineItemNo,PartNo,OperationNo',
        $orderby: 'LineItemNo',
        $top: '1', // On ne prend que la premi√®re ligne
      }
    )

    const firstMaterial = materialResponse.value?.[0]

    if (!firstMaterial) {
      console.warn(`‚ö†Ô∏è  [Operation Service] Aucun mat√©riau OP10 trouv√© pour ${orderNo}`)
      throw new Error(`No material found for Operation 10`)
    }

    console.log(`‚úÖ [Operation Service] Raw Material trouv√©: ${firstMaterial.PartNo}`)
    return firstMaterial.PartNo

  } catch (error) {
    console.error(`‚ùå [Operation Service] Erreur Raw Material pour ${orderNo}:`, error)
    throw new Error(`Failed to fetch Raw Material: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

/**
 * R√©cup√©rer les donn√©es de l'op√©ration 10 pour un Shop Order
 * 
 * Utilise l'endpoint IFS valid√© : OperationBlockHandling.svc/Reference_ShopOrderOperation
 * Documentation : /docs/api/operation-block/README.md
 * 
 * @param orderNo - Num√©ro d'ordre
 * @param releaseNo - Num√©ro de release
 * @param sequenceNo - Num√©ro de s√©quence
 * @returns Donn√©es de l'op√©ration 10 (OperationBlockId + Raw Material)
 * 
 * @example
 * ```typescript
 * const op10 = await getOperation10Data("454853", "*", "*")
 * console.log("Block ID:", op10.blockId) // peut √™tre null
 * console.log("Raw Material:", op10.rawMaterial)
 * ```
 */
export async function getOperation10Data(
  orderNo: string,
  releaseNo: string,
  sequenceNo: string
): Promise<Operation10Data> {
  console.log(`üîç [Operation Service] R√©cup√©ration OP10 pour ${orderNo}-${releaseNo}-${sequenceNo}`)

  try {
    const client = getIFSClient()

    // 1. R√©cup√©rer l'op√©ration 10 via OperationBlockHandling
    const operationResponse = await client.get<IFSODataResponse<IFSOperation>>(
      'OperationBlockHandling.svc/Reference_ShopOrderOperation',
      {
        $filter: `OrderNo eq '${orderNo}' and OperationNo eq 10`,
        $select: 'OrderNo,ReleaseNo,SequenceNo,OperationNo,OpId,OperationBlockId,OperationDescription,WorkCenterNo',
      }
    )

    const operation = operationResponse.value?.[0]

    if (!operation) {
      console.warn(`‚ö†Ô∏è  [Operation Service] OP10 non trouv√©e pour ${orderNo}`)
      throw new Error(`Operation 10 not found for ${orderNo}-${releaseNo}-${sequenceNo}`)
    }

    // R√©cup√©rer OpId (toujours pr√©sent)
    const opId = operation.OpId
    
    // ‚ö†Ô∏è IMPORTANT: OperationBlockId peut √™tre null (c'est normal)
    // ‚ö†Ô∏è TEMPORAIRE (AST/Dev) : On r√©cup√®re l'OperationBlockId (souvent vide en AST)
    // TODO PRODUCTION : En PROD, utiliser le vrai OP 10 Block ID
    // En attendant, on utilise OpId comme fallback temporaire (voir types/index.ts)
    const blockId = operation.OperationBlockId || null
    console.log(`‚úÖ [Operation Service] OP10 trouv√©e - OpId: ${opId}, Block ID: ${blockId || '(vide)'}`)

    // 2. R√©cup√©rer le Raw Material via MaterialArray
    const rawMaterial = await getRawMaterial(orderNo, releaseNo, sequenceNo)

    return {
      orderNo,
      releaseNo,
      sequenceNo,
      operationNo: 10,
      opId, // ‚úÖ Operation ID (utilis√© temporairement en AST)
      blockId,
      rawMaterial,
    }
  } catch (error) {
    console.error(`‚ùå [Operation Service] Erreur OP10 pour ${orderNo}-${releaseNo}-${sequenceNo}:`, error)
    throw new Error(`Failed to fetch Operation 10 data: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

/**
 * R√©cup√©rer une op√©ration sp√©cifique (g√©n√©rique)
 * 
 * @param orderNo - Num√©ro d'ordre
 * @param releaseNo - Num√©ro de release
 * @param sequenceNo - Num√©ro de s√©quence
 * @param operationNo - Num√©ro d'op√©ration
 * @returns Op√©ration trouv√©e ou null
 */
export async function getOperation(
  orderNo: string,
  releaseNo: string,
  sequenceNo: string,
  operationNo: number
): Promise<IFSOperation | null> {
  console.log(`üîç [Operation Service] R√©cup√©ration op√©ration ${operationNo} pour ${orderNo}-${releaseNo}-${sequenceNo}`)

  try {
    const client = getIFSClient()

    const response = await client.get<IFSODataResponse<IFSOperation>>(
      'OperationBlockHandling.svc/Reference_ShopOrderOperation',
      {
        $filter: `OrderNo eq '${orderNo}' and OperationNo eq ${operationNo}`,
        $select: 'OrderNo,ReleaseNo,SequenceNo,OperationNo,OperationBlockId,OperationDescription,WorkCenterNo',
      }
    )

    const operation = response.value?.[0] || null

    if (operation) {
      console.log(`‚úÖ [Operation Service] Op√©ration ${operationNo} trouv√©e - Block ID: ${operation.OperationBlockId || '(vide)'}`)
    } else {
      console.log(`‚ö†Ô∏è [Operation Service] Op√©ration ${operationNo} non trouv√©e`)
    }

    return operation
  } catch (error) {
    console.error(`‚ùå [Operation Service] Erreur op√©ration ${operationNo}:`, error)
    throw new Error(`Failed to fetch operation ${operationNo}`)
  }
}

/**
 * V√©rifier si une op√©ration a un OperationBlockId vide/null
 * 
 * ‚ö†Ô∏è IMPORTANT: OperationBlockId peut √™tre null (c'est une valeur valide)
 * 
 * @param orderNo - Num√©ro d'ordre
 * @param releaseNo - Num√©ro de release
 * @param sequenceNo - Num√©ro de s√©quence
 * @param operationNo - Num√©ro d'op√©ration
 * @returns true si OperationBlockId est vide/null, false sinon
 */
export async function hasEmptyBlockId(
  orderNo: string,
  releaseNo: string,
  sequenceNo: string,
  operationNo: number
): Promise<boolean> {
  try {
    const operation = await getOperation(orderNo, releaseNo, sequenceNo, operationNo)
    
    if (!operation) {
      return false
    }

    const isEmpty = !operation.OperationBlockId || operation.OperationBlockId.trim() === ''
    console.log(`üìä [Operation Service] OP${operationNo} Block ID ${isEmpty ? 'vide' : 'pr√©sent'}: "${operation.OperationBlockId || ''}"`)
    
    return isEmpty
  } catch (error) {
    console.error(`‚ùå [Operation Service] Erreur v√©rification Block ID:`, error)
    return false
  }
}
