/**
 * Service Part Label - Consolidation des donn√©es pour √©tiquettes
 * 
 * Phase 3.4 - Consolidation des donn√©es
 * 
 * Ce service orchestre la r√©cup√©ration de toutes les donn√©es n√©cessaires
 * pour g√©n√©rer les √©tiquettes Part Printer :
 * 
 * 1. Shop Order (base)
 * 2. Operation 10 (Block ID + Raw Material)
 * 3. Master Part (GENERIC CODE, LENGTH SETUP, VARNISH CODE)
 * 4. Range (Range ID par site/date)
 * 5. Barcode (g√©n√©r√© √† partir du Generic Code + Revision)
 */

import { getOperation10Data } from './operation-service'
import { getMasterPartAttributes } from './master-part-service'
import { getRangeId } from './range-service'
import type { IFSShopOrderExtended, PartLabel } from '../types'

/**
 * G√©n√©rer les donn√©es d'√©tiquette pour un Shop Order
 * 
 * @param shopOrder - Shop Order IFS
 * @param site - Site (pour r√©cup√©ration du Range)
 * @returns Donn√©es compl√®tes pour une √©tiquette (PartLabel)
 * 
 * @example
 * ```typescript
 * const label = await generatePartLabel(shopOrder, "BDR")
 * console.log("√âtiquette compl√®te:", label)
 * ```
 */
export async function generatePartLabel(
  shopOrder: IFSShopOrderExtended,
  site: string
): Promise<PartLabel> {
  console.log(`üè∑Ô∏è [Part Label Service] G√©n√©ration √©tiquette pour ${shopOrder.OrderNo}-${shopOrder.ReleaseNo}-${shopOrder.SequenceNo}`)

  try {
    // 1. R√©cup√©rer donn√©es Operation 10
    console.log('üìä [Part Label Service] √âtape 1/4 - Operation 10...')
    const op10 = await getOperation10Data(
      shopOrder.OrderNo,
      shopOrder.ReleaseNo,
      shopOrder.SequenceNo
    )

    // 2. R√©cup√©rer attributs Master Part
    console.log('üìä [Part Label Service] √âtape 2/4 - Master Part...')
    const masterPart = await getMasterPartAttributes(shopOrder.PartNo)

    // 3. R√©cup√©rer Range ID (bas√© sur plages horaires du site)
    console.log('üìä [Part Label Service] √âtape 3/4 - Range ID...')
    const rangeId = await getRangeId(site, shopOrder.RevisedStartDate) || 'N/A'

    // 4. G√©n√©rer barcode
    console.log('üìä [Part Label Service] √âtape 4/4 - Barcode...')
    const barcode = generateBarcodeData(
      masterPart.genericCode,
      masterPart.engineeringPartRev
    )

    const label: PartLabel = {
      // Shop Order
      orderNo: shopOrder.OrderNo,
      releaseNo: shopOrder.ReleaseNo,
      sequenceNo: shopOrder.SequenceNo,
      partNo: shopOrder.PartNo,
      startDate: shopOrder.RevisedStartDate,

      // Operation 10
      rawMaterial: op10.rawMaterial,
      // ‚úÖ CORRIG√â (17 oct 2025) : Utilise OperationBlockId (conforme SFD)
      operationBlockId: op10.operationBlockId,

      // Master Part
      genericCode: masterPart.genericCode,
      lengthSetup: masterPart.lengthSetup,
      varnishCode: masterPart.varnishCode,
      engineeringPartRev: masterPart.engineeringPartRev,

      // Range
      rangeId,

      // Barcode
      barcode,
    }

    console.log(`‚úÖ [Part Label Service] √âtiquette g√©n√©r√©e avec succ√®s`)
    console.log(`   üì¶ Shop Order: ${label.orderNo}-${label.releaseNo}-${label.sequenceNo}`)
    console.log(`   üè≠ Raw Material: ${label.rawMaterial}`)
    console.log(`   üîß OperationBlockId: ${label.operationBlockId || 'NULL'}`)

    return label
  } catch (error) {
    console.error(`‚ùå [Part Label Service] Erreur g√©n√©ration √©tiquette:`, error)
    throw new Error(`Failed to generate part label: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

/**
 * G√©n√©rer les donn√©es d'√©tiquette pour plusieurs Shop Orders
 * 
 * @param shopOrders - Liste de Shop Orders IFS
 * @param site - Site (pour r√©cup√©ration des Ranges)
 * @returns Liste de donn√©es d'√©tiquettes (PartLabel[])
 * 
 * @example
 * ```typescript
 * const labels = await generatePartLabels(shopOrders, "BDR")
 * console.log(`${labels.length} √©tiquettes g√©n√©r√©es`)
 * ```
 */
export async function generatePartLabels(
  shopOrders: IFSShopOrderExtended[],
  site: string
): Promise<PartLabel[]> {
  console.log(`üè∑Ô∏è [Part Label Service] G√©n√©ration de ${shopOrders.length} √©tiquettes...`)

  const labels: PartLabel[] = []
  const errors: Array<{ order: string; error: string }> = []

  // Traitement s√©quentiel pour √©viter de surcharger IFS
  // TODO: Optimiser avec Promise.all() par batches si n√©cessaire
  for (const shopOrder of shopOrders) {
    try {
      const label = await generatePartLabel(shopOrder, site)
      labels.push(label)
      
      console.log(`‚úÖ [Part Label Service] ${labels.length}/${shopOrders.length} √©tiquettes g√©n√©r√©es`)
    } catch (error) {
      const orderKey = `${shopOrder.OrderNo}-${shopOrder.ReleaseNo}-${shopOrder.SequenceNo}`
      const errorMsg = error instanceof Error ? error.message : 'Unknown error'
      
      console.error(`‚ùå [Part Label Service] Erreur pour ${orderKey}:`, errorMsg)
      errors.push({ order: orderKey, error: errorMsg })
    }
  }

  console.log(`‚úÖ [Part Label Service] G√©n√©ration termin√©e: ${labels.length} succ√®s, ${errors.length} erreurs`)

  if (errors.length > 0) {
    console.warn('‚ö†Ô∏è [Part Label Service] Erreurs rencontr√©es:', errors)
  }

  return labels
}

/**
 * G√©n√©rer la donn√©e pour le barcode
 * 
 * Format: GENERIC_CODE_REVISION
 * Exemple: "1000014690_Rev_02"
 * 
 * @param genericCode - Code g√©n√©rique de la pi√®ce
 * @param revision - R√©vision de la pi√®ce
 * @returns Donn√©e du barcode (string)
 */
export function generateBarcodeData(
  genericCode: string,
  revision: string
): string {
  // Format simple pour l'instant
  // TODO: V√©rifier le format exact requis pour les codes-barres
  const barcodeData = `${genericCode}_${revision}`
  
  console.log(`üî¢ [Part Label Service] Barcode data: ${barcodeData}`)
  
  return barcodeData
}

/**
 * Grouper les √©tiquettes par (Raw Material, Varnish Code)
 * 
 * N√©cessaire pour la g√©n√©ration PDF : 1 page par couple (Raw Material, Varnish Code)
 * 
 * @param labels - Liste d'√©tiquettes
 * @returns Map group√©e par cl√© "rawMaterial_varnishCode"
 */
export function groupLabelsByMaterialAndVarnish(
  labels: PartLabel[]
): Map<string, PartLabel[]> {
  console.log(`üìä [Part Label Service] Groupement de ${labels.length} √©tiquettes...`)

  const grouped = new Map<string, PartLabel[]>()

  for (const label of labels) {
    const key = `${label.rawMaterial}_${label.varnishCode}`
    
    if (!grouped.has(key)) {
      grouped.set(key, [])
    }
    
    grouped.get(key)!.push(label)
  }

  console.log(`‚úÖ [Part Label Service] ${grouped.size} groupes cr√©√©s`)

  // Log des groupes pour debug
  for (const [key, group] of grouped.entries()) {
    console.log(`  üì¶ ${key}: ${group.length} √©tiquettes`)
  }

  return grouped
}

/**
 * Trier les √©tiquettes par Length Setup (d√©croissant)
 * 
 * Requis pour l'affichage sur les √©tiquettes
 * 
 * @param labels - Liste d'√©tiquettes
 * @returns Liste tri√©e par Length Setup d√©croissant
 */
export function sortLabelsByLengthSetup(labels: PartLabel[]): PartLabel[] {
  return labels.sort((a, b) => {
    const lengthA = parseFloat(a.lengthSetup) || 0
    const lengthB = parseFloat(b.lengthSetup) || 0
    return lengthB - lengthA // D√©croissant
  })
}

/**
 * Pr√©parer les √©tiquettes pour l'impression
 * 
 * Groupe et trie les √©tiquettes selon les r√®gles Part Printer :
 * - Groupement par (Raw Material, Varnish Code)
 * - Tri par Length Setup d√©croissant dans chaque groupe
 * 
 * @param labels - Liste d'√©tiquettes
 * @returns Map de groupes tri√©s
 */
export function prepareLabelsForPrinting(
  labels: PartLabel[]
): Map<string, PartLabel[]> {
  console.log(`üñ®Ô∏è [Part Label Service] Pr√©paration ${labels.length} √©tiquettes pour impression...`)

  const grouped = groupLabelsByMaterialAndVarnish(labels)

  // Trier chaque groupe par Length Setup
  for (const [key, group] of grouped.entries()) {
    const sorted = sortLabelsByLengthSetup(group)
    grouped.set(key, sorted)
    console.log(`  ‚úÖ Groupe ${key}: ${sorted.length} √©tiquettes tri√©es`)
  }

  console.log(`‚úÖ [Part Label Service] Pr√©paration termin√©e`)

  return grouped
}
