/**
 * Service Serial Number - R√©cup√©ration des num√©ros de s√©rie depuis IFS
 * 
 * Fonctionnalit√©s:
 * - R√©cup√©ration des Serial Numbers via DOP Header ID
 * - Utilisation de l'endpoint Reference_DopHeadSerialReserv
 * 
 * Endpoint IFS:
 * DopHeaderHandling.svc/Reference_DopHeadSerialReserv
 * 
 * Champs disponibles:
 * - DopId: ID du DOP Header
 * - SerialNo: Num√©ro de s√©rie du bateau
 * - PartNo: R√©f√©rence article
 * - SerialSource: Origine ("Shop Order", etc.)
 */

import { getIFSClient } from './ifs-client'
import type { IFSODataResponse, DopHeadSerialReservation } from '@/core/types/ifs'

/**
 * R√©cup√©rer le premier Serial Number associ√© √† un DOP ID
 * 
 * @param dopId - DOP Header ID (ex: "54", "95", "103")
 * @returns Serial Number trouv√© ou null si aucun
 * 
 * @example
 * ```typescript
 * const serialNo = await getFirstSerialNumberFromDop("95")
 * // ‚Üí "LG5MA0114"
 * ```
 */
export async function getFirstSerialNumberFromDop(dopId: string): Promise<string | null> {
  if (!dopId) {
    console.warn('‚ö†Ô∏è getFirstSerialNumberFromDop: Empty DOP ID provided')
    return null
  }

  console.log(`üîç Searching Serial Number for DOP ID: ${dopId}`)

  const client = getIFSClient()

  try {
    // Construire le filtre OData
    // Note: Utiliser contains() car eq avec strings pose probl√®me
    const filter = `contains(DopId,'${dopId.trim()}')`

    console.log(`üìä OData filter: ${filter}`)

    // Requ√™te IFS
    const response = await client.get<IFSODataResponse<DopHeadSerialReservation>>(
      'DopHeaderHandling.svc/Reference_DopHeadSerialReserv',
      {
        $filter: filter,
        $select: 'DopId,SerialNo,PartNo',
        $top: '50', // Limiter le nombre de r√©sultats
      }
    )

    // V√©rifier si des r√©sultats ont √©t√© trouv√©s
    if (!response.value || response.value.length === 0) {
      console.log(`‚ÑπÔ∏è No Serial Number found for DOP ID: ${dopId}`)
      return null
    }

    console.log(`‚úÖ Found ${response.value.length} Serial Number(s)`)

    // Retourner le premier Serial Number trouv√©
    const firstResult = response.value[0]
    console.log(`‚úÖ Serial Number found: ${firstResult.SerialNo}`)

    return firstResult.SerialNo
  } catch (error) {
    console.error(`‚ùå Failed to fetch Serial Number for DOP ID ${dopId}:`, error)
    throw new Error(
      `Failed to fetch Serial Number: ${error instanceof Error ? error.message : 'Unknown error'}`
    )
  }
}

/**
 * R√©cup√©rer tous les Serial Numbers associ√©s √† un DOP ID
 * 
 * @param dopId - DOP Header ID (ex: "54", "95", "103")
 * @returns Liste des Serial Numbers trouv√©s
 * 
 * @example
 * ```typescript
 * const serialNumbers = await getAllSerialNumbersFromDop("95")
 * // ‚Üí ["LG5MA0114", "LG5MA0115"]
 * ```
 */
export async function getAllSerialNumbersFromDop(dopId: string): Promise<DopHeadSerialReservation[]> {
  if (!dopId) {
    console.warn('‚ö†Ô∏è getAllSerialNumbersFromDop: Empty DOP ID provided')
    return []
  }

  console.log(`üîç Searching all Serial Numbers for DOP ID: ${dopId}`)

  const client = getIFSClient()

  try {
    // Construire le filtre OData
    const filter = `contains(DopId,'${dopId.trim()}')`

    console.log(`üìä OData filter: ${filter}`)

    // Requ√™te IFS
    const response = await client.get<IFSODataResponse<DopHeadSerialReservation>>(
      'DopHeaderHandling.svc/Reference_DopHeadSerialReserv',
      {
        $filter: filter,
        $select: 'DopId,SerialNo,PartNo,SerialSource',
        $top: '100', // Augmenter la limite pour r√©cup√©rer tous les r√©sultats
      }
    )

    console.log(`‚úÖ Found ${response.value.length} Serial Number(s)`)

    return response.value
  } catch (error) {
    console.error(`‚ùå Failed to fetch Serial Numbers for DOP ID ${dopId}:`, error)
    throw new Error(
      `Failed to fetch Serial Numbers: ${error instanceof Error ? error.message : 'Unknown error'}`
    )
  }
}

/**
 * V√©rifier si un DOP ID a des Serial Numbers associ√©s
 * 
 * @param dopId - DOP Header ID (ex: "54", "95", "103")
 * @returns true si au moins un Serial Number existe, false sinon
 */
export async function hasSerialNumbers(dopId: string): Promise<boolean> {
  if (!dopId) return false

  try {
    const serialNo = await getFirstSerialNumberFromDop(dopId)
    return serialNo !== null
  } catch (error) {
    console.error(`‚ùå Error checking Serial Numbers for DOP ID ${dopId}:`, error)
    return false
  }
}
