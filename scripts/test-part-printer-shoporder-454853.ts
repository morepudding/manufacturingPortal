#!/usr/bin/env tsx
/**
 * Script de test Part Printer - Shop Order 463215
 * Pi√®ce: C000001026112G110 (TRAVERSE)
 * 
 * Ce script teste l'extraction compl√®te des donn√©es n√©cessaires
 * pour g√©n√©rer une √©tiquette Part Printer.
 */

import * as dotenv from 'dotenv';
import * as path from 'path';

// Charger .env.local
dotenv.config({ path: path.resolve(__dirname, '../.env.local') });

import { getIFSClient } from '../src/shared/services/ifs-client';

interface ShopOrder {
  OrderNo: string;
  ReleaseNo: string;
  SequenceNo: string;
  Contract: string;
  PartNo: string;
  PartDescription: string;
  Objstate: string;
  RevisedStartDate: string;
  CBlockDates: boolean;
  ProductionLine: string;
  EngChgLevel: string;
}

interface Operation {
  OrderNo: string;
  ReleaseNo: string;
  SequenceNo: string;
  OperationNo: number;
  OperationBlockId?: string;
  WorkCenterNo?: string;
}

interface Material {
  OrderNo: string;
  ReleaseNo: string;
  SequenceNo: string;
  LineItemNo: number;
  PartNo: string;
  PartDescription?: string;
  OpNo?: number;
}

interface PartAttribute {
  PartNo: string;
  AttributeId: string;
  ValueText?: string;
  ValueNo?: number;
}

/**
 * Calculer le Range ID bas√© sur la date et le mode (d√©bit/red√©bit)
 * 
 * Logique m√©tier :
 * - Range = Quanti√®me (jour de l'ann√©e) + Lettre
 * - Lettre : "R" si red√©bit (CBlockDates = false), sinon "A"
 * 
 * @param dateString - Date au format ISO (RevisedStartDate du Shop Order)
 * @param isRecutting - true si red√©bit (CBlockDates = false)
 * @returns Range ID (ex: "274 A" ou "274 R")
 */
function calculateRangeId(dateString: string, isRecutting: boolean): string {
  const date = new Date(dateString);
  const start = new Date(date.getFullYear(), 0, 0);
  const diff = date.getTime() - start.getTime();
  const oneDay = 1000 * 60 * 60 * 24;
  const dayOfYear = Math.floor(diff / oneDay);
  
  // Lettre du Range :
  // - "R" = Red√©bit (CBlockDates = false)
  // - "A" = D√©bit classique (CBlockDates = true)
  const letter = isRecutting ? 'R' : 'A';
  
  // Format: "DDD X" (ex: "274 A" ou "274 R")
  return `${dayOfYear} ${letter}`;
}

async function testShopOrder454853() {
  console.log('üöÄ Test Part Printer - Shop Order 463215');
  console.log('üì¶ Pi√®ce attendue: C000001026112G110 (TRAVERSE)\n');

  const client = getIFSClient();

  try {
    // =====================================================
    // √âTAPE 1 : R√©cup√©rer le Shop Order 463215
    // =====================================================
    console.log('üìã √âTAPE 1 : R√©cup√©ration du Shop Order 463215...');
    
    const shopOrderResponse = await client.get<{ value: ShopOrder[] }>(
      'ShopOrderHandling.svc/ShopOrds',
      {
        $filter: "OrderNo eq '463215' and ReleaseNo eq '*' and SequenceNo eq '*'",
        $select: 'OrderNo,ReleaseNo,SequenceNo,Contract,PartNo,PartDescription,Objstate,RevisedStartDate,CBlockDates,ProductionLine,EngChgLevel'
      }
    );

    if (!shopOrderResponse.value || shopOrderResponse.value.length === 0) {
      console.error('‚ùå Shop Order 463215 introuvable !');
      return;
    }

    const shopOrder = shopOrderResponse.value[0];
    console.log('‚úÖ Shop Order trouv√©:');
    console.log(`   OrderNo: ${shopOrder.OrderNo}`);
    console.log(`   PartNo: ${shopOrder.PartNo}`);
    console.log(`   Description: ${shopOrder.PartDescription}`);
    console.log(`   Site (Contract): ${shopOrder.Contract}`);
    console.log(`   Production Line: ${shopOrder.ProductionLine}`);
    console.log(`   Start Date: ${shopOrder.RevisedStartDate}`);
    console.log(`   CBlockDates: ${shopOrder.CBlockDates}`);
    console.log(`   Engineering Rev: ${shopOrder.EngChgLevel}`);
    console.log(`   √âtat (Objstate): ${shopOrder.Objstate}\n`);

    // =====================================================
    // √âTAPE 2 : R√©cup√©rer l'op√©ration OP10
    // =====================================================
    console.log('‚öôÔ∏è  √âTAPE 2 : R√©cup√©ration op√©ration OP10...');
    
    const operationsResponse = await client.get<{ value: Operation[] }>(
      'OperationBlockHandling.svc/Reference_ShopOrderOperation',
      {
        $filter: `OrderNo eq '${shopOrder.OrderNo}' and ReleaseNo eq '${shopOrder.ReleaseNo}' and SequenceNo eq '${shopOrder.SequenceNo}'`,
        $select: 'OrderNo,ReleaseNo,SequenceNo,OperationNo,OperationBlockId,WorkCenterNo'
      }
    );

    let op10: Operation | undefined;
    if (operationsResponse.value && operationsResponse.value.length > 0) {
      const operations = operationsResponse.value;
      op10 = operations.find((op: Operation) => op.OperationNo === 10);
      
      if (op10) {
        console.log('‚úÖ Op√©ration OP10 trouv√©e:');
        console.log(`   Operation No: ${op10.OperationNo}`);
        console.log(`   Block ID: ${op10.OperationBlockId || '(vide)'}`);
        console.log(`   Work Center: ${op10.WorkCenterNo || '(non disponible)'}\n`);
      } else {
        console.warn('‚ö†Ô∏è  Op√©ration OP10 non trouv√©e. Recherche de l\'op√©ration avec le plus petit num√©ro...');
        const sortedOps = operations.sort((a: Operation, b: Operation) => a.OperationNo - b.OperationNo);
        if (sortedOps.length > 0) {
          op10 = sortedOps[0];
          console.log(`‚úÖ Op√©ration ${op10!.OperationNo} trouv√©e (plus petit num√©ro):`);
          console.log(`   Block ID: ${op10!.OperationBlockId || '(vide)'}`);
          console.log(`   Work Center: ${op10!.WorkCenterNo || '(non disponible)'}\n`);
        }
      }
    }

    // =====================================================
    // √âTAPE 3 : R√©cup√©rer le Raw Material (Material History)
    // =====================================================
    console.log('ü™µ √âTAPE 3 : R√©cup√©ration Raw Material (via MaterialHistorys)...');
    
    const materialsResponse = await client.get<{ value: any[] }>(
      'ManufacturingMaterialHistoryHandling.svc/MaterialHistorys',
      {
        $filter: `OrderRef1 eq '${shopOrder.OrderNo}' and OperationNo eq 10`,
        $select: 'OrderRef1,PartNo,PartDescription,OperationNo,OrderType,MaterialHistoryAction,InventoryQty,InventoryUom',
        $top: '10'
      }
    );

    let rawMaterial: Material | undefined;
    if (materialsResponse.value && materialsResponse.value.length > 0) {
      const materials = materialsResponse.value;
      
      console.log(`‚úÖ ${materials.length} mat√©riau(x) trouv√©(s) pour OP10`);
      console.log('\nüìã Liste des mat√©riaux:');
      materials.forEach((mat: any, idx: number) => {
        console.log(`   ${idx + 1}. PartNo: ${mat.PartNo} | Description: ${mat.PartDescription || 'N/A'} | Qty: ${mat.InventoryQty} ${mat.InventoryUom}`);
      });
      
      // Prendre le premier mat√©riau comme Raw Material
      rawMaterial = {
        OrderNo: shopOrder.OrderNo,
        ReleaseNo: shopOrder.ReleaseNo,
        SequenceNo: shopOrder.SequenceNo,
        LineItemNo: 0,
        PartNo: materials[0].PartNo,
        PartDescription: materials[0].PartDescription
      };
      
      console.log(`\n‚úÖ Raw Material s√©lectionn√©: ${rawMaterial.PartNo} (${rawMaterial.PartDescription || 'N/A'})\n`);
    } else {
      console.warn('‚ö†Ô∏è  Aucun mat√©riau trouv√© pour OP10\n');
    }

    // =====================================================
    // √âTAPE 4 : R√©cup√©rer les attributs Master Part
    // =====================================================
    console.log('üè∑Ô∏è  √âTAPE 4 : R√©cup√©ration attributs Master Part...');
    console.log(`   Interrogation API pour: ${shopOrder.PartNo}\n`);

    const attributesToFind = [
      { id: 'GENERIC CODE', name: 'Generic Code' },
      { id: 'LENGTH SETUP', name: 'Length Setup' },
      { id: 'VARNISH CODE', name: 'Varnish Code' }
    ];

    const attributes: { [key: string]: string | number | null } = {};

    // Utiliser PartHandling.svc comme dans le script find-good-test-shoporder.ts
    try {
      const refResponse = await client.get<{ value: any[] }>(
        `PartHandling.svc/PartCatalogSet(PartNo='${shopOrder.PartNo}')/PartCatalogReferenceArray`,
        {}
      );

      if (refResponse.value && refResponse.value.length > 0) {
        const ref = refResponse.value.find((r: any) => r.TechnicalSpecNo != null);
        
        if (ref) {
          const keyRef = encodeURIComponent(ref.KeyRef);
          const techResponse = await client.get<{ value: any[] }>(
            `PartHandling.svc/PartCatalogSet(PartNo='${shopOrder.PartNo}')/PartCatalogReferenceArray(LuName='${ref.LuName}',KeyRef='${keyRef}',TechnicalSpecNo=${ref.TechnicalSpecNo})/TechnicalSpecBothArray`,
            {}
          );

          if (techResponse.value && techResponse.value.length > 0) {
            console.log(`   ‚úÖ ${techResponse.value.length} attributs trouv√©s\n`);
            
            // Chercher les 3 attributs cl√©s
            for (const attr of attributesToFind) {
              const foundAttr = techResponse.value.find((a: any) => 
                (a.Attribute || a.AttrId || '').toUpperCase().includes(attr.id.split(' ')[0])
              );
              
              if (foundAttr) {
                const value = foundAttr.AttrValue || foundAttr.ValueText || foundAttr.AttrValueNumeric || foundAttr.ValueNo || null;
                attributes[attr.name] = value;
                console.log(`   ‚úÖ ${attr.name}: ${value}`);
              } else {
                attributes[attr.name] = null;
                console.log(`   ‚ö†Ô∏è  ${attr.name}: Non trouv√©`);
              }
            }
          }
        }
      }
    } catch (error) {
      console.error(`   ‚ùå Erreur lors de la r√©cup√©ration des attributs:`, error);
      attributesToFind.forEach(attr => {
        attributes[attr.name] = null;
      });
    }

    console.log();

    // =====================================================
    // √âTAPE 5 : Calculer le Range ID
    // =====================================================
    console.log('üìç √âTAPE 5 : Calcul du Range ID...');
    
    // Logique : Quanti√®me + Lettre
    // - "R" si Red√©bit (CBlockDates = false)
    // - "A" si D√©bit classique (CBlockDates = true)
    const isRecutting = !shopOrder.CBlockDates; // false = Red√©bit ‚Üí "R"
    const rangeId = calculateRangeId(shopOrder.RevisedStartDate, isRecutting);
    
    console.log(`   ‚úÖ Range ID calcul√©: ${rangeId}`);
    console.log(`   Mode: ${isRecutting ? 'Red√©bit (R)' : 'D√©bit classique (A)'}`);
    console.log(`   Date source: ${shopOrder.RevisedStartDate}\n`);

    // =====================================================
    // R√âSUM√â FINAL
    // =====================================================
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üìä R√âSUM√â - DONN√âES POUR √âTIQUETTE PART PRINTER');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

    console.log('üè∑Ô∏è  INFORMATIONS √âTIQUETTE:');
    console.log(`   Shop Order:        ${shopOrder.OrderNo}-${shopOrder.ReleaseNo}-${shopOrder.SequenceNo}`);
    console.log(`   Part No:           ${shopOrder.PartNo}`);
    console.log(`   Raw Material:      ${rawMaterial?.PartNo || 'N/A ‚ö†Ô∏è'}`);
    console.log(`   Block ID (OP10):   ${op10?.OperationBlockId || '(vide)'}`);
    console.log(`   Generic Code:      ${attributes['Generic Code'] || 'N/A ‚ö†Ô∏è'}`);
    console.log(`   Length Setup:      ${attributes['Length Setup'] || 'N/A ‚ö†Ô∏è'}`);
    console.log(`   Varnish Code:      ${attributes['Varnish Code'] || 'N/A ‚ö†Ô∏è'}`);
    console.log(`   Engineering Rev:   ${shopOrder.EngChgLevel}`);
    console.log(`   Range ID:          ${rangeId} ‚úÖ\n`);

    console.log('üìã PARAM√àTRES INTERFACE PART PRINTER:');
    console.log(`   Site:              ${shopOrder.Contract}`);
    console.log(`   Production Line:   ${shopOrder.ProductionLine}`);
    console.log(`   Start Date:        ${new Date(shopOrder.RevisedStartDate).toISOString().split('T')[0]}`);
    console.log(`   Mode:              ${shopOrder.CBlockDates ? 'D√©bit classique' : 'Red√©bit'}`);
    console.log(`   OP10 Block ID:     ${op10?.OperationBlockId ? 'Filtrer sur valeur sp√©cifique' : 'EMPTY (strictement vide)'}\n`);

    // Score final
    const totalFields = 11;
    const foundFields = [
      shopOrder.OrderNo,
      shopOrder.PartNo,
      rawMaterial?.PartNo,
      op10?.OperationBlockId !== undefined,
      attributes['Generic Code'],
      attributes['Length Setup'],
      attributes['Varnish Code'],
      shopOrder.EngChgLevel,
      rangeId,
      op10?.WorkCenterNo,
      shopOrder.Contract
    ].filter(v => v !== null && v !== undefined).length;

    console.log(`üìä SCORE: ${foundFields}/${totalFields} √©l√©ments trouv√©s (${Math.round(foundFields / totalFields * 100)}%)\n`);

    console.log('‚úÖ Test termin√© avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    if (error instanceof Error) {
      console.error('   Message:', error.message);
      console.error('   Stack:', error.stack);
    }
  }
}

// Ex√©cution
testShopOrder454853();
