/**
 * Script de recherche de Shop Orders avec OperationBlockId
 * 
 * Recherche des Shop Orders o√π OperationBlockId n'est pas NULL
 * pour comprendre la structure des blocs d'op√©ration
 * 
 * Usage: npx tsx scripts/find-shoporders-with-operation-block.ts
 */

import { getIFSClient } from '../src/shared/services/ifs-client'

interface IFSShopOrderOperation {
  OrderNo: string
  ReleaseNo: string
  SequenceNo: string
  OperationNo: number
  OperationDescription: string
  OperationBlockId: string | null
  OperStatusCode: string
  Contract: string
  WorkCenterNo: string
  PartNo: string
  RemainingQty: number
  OperationBlockObjstate: string | null
  // Autres propri√©t√©s
  [key: string]: any
}

interface IFSShopOrder {
  OrderNo: string
  ReleaseNo: string
  SequenceNo: string
  Contract: string
  PartNo: string
  ObjState: string
  RevisedQtyDue: number
  QtyComplete: number
  // Navigation properties
  OperationArray?: IFSShopOrderOperation[]
  [key: string]: any
}

interface IFSODataResponse<T> {
  '@odata.context': string
  value: T[]
  '@odata.nextLink'?: string
}

async function findShopOrdersWithOperationBlock() {
  console.log('üîç === RECHERCHE SHOP ORDERS AVEC OPERATION BLOCK ID ===\n')
  console.log('‚ö° Utilisation de la strat√©gie RAPIDE (requ√™te directe)\n')
  
  try {
    const client = getIFSClient()
    
    // 1. Recherche directe sur les op√©rations (RAPIDE)
    console.log('üìã 1. Recherche directe sur ShopOrderOperationSet...\n')
    
    let directResponse: IFSODataResponse<IFSShopOrderOperation>
    
    try {
      directResponse = await client.get<IFSODataResponse<IFSShopOrderOperation>>(
        'ShopOrderHandling.svc/ShopOrderOperationSet',
        {
          $select: 'OrderNo,ReleaseNo,SequenceNo,OperationNo,OperationDescription,OperationBlockId,OperationBlockObjstate,OperStatusCode,WorkCenterNo,PartNo,RemainingQty,Contract',
          $filter: "OperationBlockId ne null",
          $top: '100',
          $orderby: 'OrderNo desc'
        }
      )
      
      console.log(`‚úÖ ${directResponse.value.length} op√©ration(s) avec OperationBlockId trouv√©e(s)\n`)
      console.log('='.repeat(120))
      
    } catch (error: any) {
      console.log(`‚ùå Erreur avec filtre "ne null": ${error.message}`)
      console.log('   Tentative sans filtre et filtrage c√¥t√© client...\n')
      
      // Fallback: r√©cup√©rer sans filtre et filtrer c√¥t√© client
      directResponse = await client.get<IFSODataResponse<IFSShopOrderOperation>>(
        'ShopOrderHandling.svc/ShopOrderOperationSet',
        {
          $select: 'OrderNo,ReleaseNo,SequenceNo,OperationNo,OperationDescription,OperationBlockId,OperationBlockObjstate,OperStatusCode,WorkCenterNo,PartNo,RemainingQty,Contract',
          $top: '500',
          $orderby: 'OrderNo desc'
        }
      )
      
      // Filtrer c√¥t√© client
      directResponse.value = directResponse.value.filter(op => op.OperationBlockId !== null)
      console.log(`‚úÖ ${directResponse.value.length} op√©ration(s) avec OperationBlockId (filtr√© c√¥t√© client)\n`)
      console.log('='.repeat(120))
    }
    
    if (directResponse.value.length === 0) {
      console.log('\n‚ùå Aucune op√©ration trouv√©e avec OperationBlockId')
      console.log('   ‚Üí Les Operation Blocks ne sont peut-√™tre pas utilis√©s dans ce syst√®me IFS')
      console.log('\n‚úÖ === RECHERCHE TERMIN√âE ===\n')
      return
    }
    
    // 2. Grouper par Shop Order
    console.log('\nüìä 2. REGROUPEMENT PAR SHOP ORDER:\n')
    console.log('-'.repeat(100))
    
    const shopOrderMap = new Map<string, IFSShopOrderOperation[]>()
    
    directResponse.value.forEach(op => {
      const key = `${op.OrderNo}-${op.ReleaseNo}-${op.SequenceNo}`
      if (!shopOrderMap.has(key)) {
        shopOrderMap.set(key, [])
      }
      shopOrderMap.get(key)!.push(op)
    })
    
    console.log(`   Nombre de Shop Orders distincts: ${shopOrderMap.size}\n`)
    
    // Afficher chaque Shop Order
    let shopOrderIndex = 1
    shopOrderMap.forEach((operations, shopOrderKey) => {
      const firstOp = operations[0]
      console.log(`\n${shopOrderIndex}. SHOP ORDER: ${shopOrderKey}`)
      console.log('-'.repeat(100))
      console.log(`   üè≠ Site: ${firstOp.Contract}`)
      console.log(`   üì¶ Part No: ${firstOp.PartNo}`)
      console.log(`   üîß ${operations.length} op√©ration(s) avec Block ID:`)
      
      operations.forEach(op => {
        console.log(`\n      OP ${op.OperationNo} - ${op.OperationDescription}`)
        console.log(`         ‚îú‚îÄ Block ID: ${op.OperationBlockId}`)
        console.log(`         ‚îú‚îÄ Block State: ${op.OperationBlockObjstate || 'N/A'}`)
        console.log(`         ‚îú‚îÄ Status: ${op.OperStatusCode}`)
        console.log(`         ‚îú‚îÄ Work Center: ${op.WorkCenterNo}`)
        console.log(`         ‚îî‚îÄ Remaining Qty: ${op.RemainingQty}`)
      })
      
      shopOrderIndex++
    })
    
    // 3. Analyser les patterns d'OperationBlockId
    console.log('\n\nÔøΩ 3. ANALYSE DES OPERATION BLOCK IDs:\n')
    console.log('-'.repeat(100))
    
    const allBlockIds = new Set<string>()
    const blockIdUsage = new Map<string, number>()
    const blockIdBySite = new Map<string, Set<string>>()
    
    directResponse.value.forEach(op => {
      if (op.OperationBlockId) {
        allBlockIds.add(op.OperationBlockId)
        blockIdUsage.set(
          op.OperationBlockId, 
          (blockIdUsage.get(op.OperationBlockId) || 0) + 1
        )
        
        if (!blockIdBySite.has(op.Contract)) {
          blockIdBySite.set(op.Contract, new Set())
        }
        blockIdBySite.get(op.Contract)!.add(op.OperationBlockId)
      }
    })
    
    console.log(`   Nombre unique de Block IDs: ${allBlockIds.size}`)
    console.log(`\n   Liste des Block IDs (tri√©s par utilisation):`)
    
    Array.from(blockIdUsage.entries())
      .sort((a, b) => b[1] - a[1])
      .forEach(([blockId, count]) => {
        console.log(`      ‚Ä¢ ${blockId} (utilis√© ${count} fois)`)
      })
    
    // 4. Groupement par Block State
    console.log('\n\nüîÑ 4. GROUPEMENT PAR BLOCK STATE:\n')
    console.log('-'.repeat(100))
    
    const blockStates = new Map<string, number>()
    directResponse.value.forEach(op => {
      if (op.OperationBlockId) {
        const state = op.OperationBlockObjstate || 'NULL'
        blockStates.set(state, (blockStates.get(state) || 0) + 1)
      }
    })
    
    Array.from(blockStates.entries()).sort((a, b) => b[1] - a[1]).forEach(([state, count]) => {
      console.log(`   ${state}: ${count} op√©ration(s)`)
    })
    
    // 5. Groupement par Site
    console.log('\n\nüè≠ 5. R√âPARTITION PAR SITE:\n')
    console.log('-'.repeat(100))
    
    const siteStats = new Map<string, number>()
    directResponse.value.forEach(op => {
      siteStats.set(op.Contract, (siteStats.get(op.Contract) || 0) + 1)
    })
    
    Array.from(siteStats.entries()).sort((a, b) => b[1] - a[1]).forEach(([site, count]) => {
      const blocks = blockIdBySite.get(site) || new Set()
      console.log(`   ${site}: ${count} op√©ration(s) | ${blocks.size} Block ID(s) unique(s)`)
    })
    
    // 6. Statistiques globales
    console.log('\n\nüìä 6. STATISTIQUES GLOBALES:\n')
    console.log('-'.repeat(100))
    
    console.log(`   Total op√©rations avec Block ID: ${directResponse.value.length}`)
    console.log(`   Nombre de Shop Orders distincts: ${shopOrderMap.size}`)
    console.log(`   Nombre de Block IDs uniques: ${allBlockIds.size}`)
    console.log(`   Nombre de sites utilisant les blocks: ${blockIdBySite.size}`)
    
    const avgOpsPerShopOrder = directResponse.value.length / shopOrderMap.size
    console.log(`   Moyenne op√©rations/Shop Order: ${avgOpsPerShopOrder.toFixed(2)}`)
    
    // 7. Export JSON pour analyse
    console.log('\n\nÔøΩ 7. EXPORT DES DONN√âES:\n')
    console.log('-'.repeat(100))
    
    const exportData = {
      timestamp: new Date().toISOString(),
      summary: {
        totalOperations: directResponse.value.length,
        uniqueShopOrders: shopOrderMap.size,
        uniqueBlockIds: allBlockIds.size,
        sitesWithBlocks: blockIdBySite.size
      },
      shopOrders: Array.from(shopOrderMap.entries()).map(([key, operations]) => ({
        shopOrderKey: key,
        orderNo: operations[0].OrderNo,
        releaseNo: operations[0].ReleaseNo,
        sequenceNo: operations[0].SequenceNo,
        contract: operations[0].Contract,
        partNo: operations[0].PartNo,
        operationsCount: operations.length,
        operations: operations.map(op => ({
          operationNo: op.OperationNo,
          description: op.OperationDescription,
          blockId: op.OperationBlockId,
          blockState: op.OperationBlockObjstate,
          status: op.OperStatusCode,
          workCenter: op.WorkCenterNo,
          remainingQty: op.RemainingQty
        }))
      })),
      blockIds: Array.from(blockIdUsage.entries()).map(([blockId, count]) => ({
        blockId,
        usageCount: count
      }))
    }
    
    const fs = require('fs')
    const outputPath = 'scripts/operation-block-results.json'
    fs.writeFileSync(outputPath, JSON.stringify(exportData, null, 2))
    console.log(`   ‚úÖ Donn√©es export√©es vers: ${outputPath}`)
    
    // 7. Recommandations
    console.log('\n\nüí° 7. RECOMMANDATIONS POUR PART PRINTER:\n')
    console.log('-'.repeat(100))
    console.log('   1. V√©rifier si OperationBlockId est utilis√© dans votre site cible (BDR)')
    console.log('   2. Si pr√©sent, int√©grer OperationBlockId dans les filtres de recherche')
    console.log('   3. Documenter la signification des Block States')
    console.log('   4. Tester l\'impact sur l\'extraction de donn√©es (OP10)')
    console.log('   5. Pr√©voir un traitement sp√©cial pour les op√©rations group√©es')
    
    console.log('\n\n‚úÖ === RECHERCHE TERMIN√âE ===\n')
    
  } catch (error: any) {
    console.error('‚ùå Erreur lors de la recherche:', error.message)
    if (error.response) {
      console.error('   Response:', JSON.stringify(error.response.data, null, 2))
    }
    process.exit(1)
  }
}

// Ex√©cution
findShopOrdersWithOperationBlock()
