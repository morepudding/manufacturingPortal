/**
 * Script d'analyse des langues IFS Cloud
 * 
 * Explore les langues disponibles et leurs propri√©t√©s pour l'impression
 * 
 * Usage: npx tsx scripts/analyze-ifs-languages.ts
 */

import { getIFSClient } from '../src/shared/services/ifs-client'

interface IFSLanguage {
  LangCode: string
  Description: string
  Status?: string
  LangCodeRfc3066?: string
  Installed?: boolean
  EnabledForLogin?: boolean
  // Autres propri√©t√©s potentielles
  [key: string]: any
}

interface IFSODataResponse<T> {
  '@odata.context': string
  value: T[]
}

async function analyzeLanguages() {
  console.log('üåê === ANALYSE DES LANGUES IFS CLOUD ===\n')
  
  try {
    const client = getIFSClient()
    
    // 1. R√©cup√©ration de toutes les langues disponibles
    console.log('üìã 1. R√©cup√©ration de toutes les langues disponibles...\n')
    
    const response = await client.get<IFSODataResponse<IFSLanguage>>(
      'PrintDialog.svc/LanguageCodeSet',
      {
        $top: '100',
      }
    )
    
    console.log(`‚úÖ Trouv√© ${response.value.length} langue(s)\n`)
    console.log('=' .repeat(120))
    
    // 2. Affichage d√©taill√© de chaque langue
    console.log('\nüìä 2. D√©tails de chaque langue:\n')
    
    response.value.forEach((lang, index) => {
      console.log(`\n${index + 1}. ${lang.LangCode} - ${lang.Description}`)
      console.log('-'.repeat(100))
      
      // Afficher toutes les propri√©t√©s
      Object.keys(lang).forEach(key => {
        if (key !== 'LangCode' && key !== 'Description') {
          console.log(`   ${key}: ${JSON.stringify(lang[key])}`)
        }
      })
    })
    
    // 3. Statistiques
    console.log('\n\nüìà 3. Statistiques:\n')
    console.log(`   Total de langues: ${response.value.length}`)
    
    const installed = response.value.filter(l => l.Installed === true).length
    const enabledForLogin = response.value.filter(l => l.EnabledForLogin === true).length
    
    console.log(`   Langues install√©es: ${installed}`)
    console.log(`   Langues activ√©es pour login: ${enabledForLogin}`)
    
    // 4. Codes de langues disponibles
    console.log('\n\nüìù 4. Codes de langues disponibles (pour impression):\n')
    const langCodes = response.value.map(l => l.LangCode).sort()
    console.log(`   [${langCodes.map(c => `"${c}"`).join(', ')}]`)
    
    // 5. Mapping RFC 3066 (si disponible)
    console.log('\n\nüåç 5. Mapping RFC 3066 (codes standards internationaux):\n')
    response.value.forEach(lang => {
      if (lang.LangCodeRfc3066) {
        console.log(`   ${lang.LangCode} ‚Üí ${lang.LangCodeRfc3066} (${lang.Description})`)
      }
    })
    
    // 6. Test d'une requ√™te avec filtre
    console.log('\n\nüîç 6. Test de r√©cup√©ration d\'une langue sp√©cifique (fr):\n')
    
    const frResponse = await client.get<IFSODataResponse<IFSLanguage>>(
      'PrintDialog.svc/LanguageCodeSet',
      {
        $filter: "LangCode eq 'fr'",
      }
    )
    
    if (frResponse.value.length > 0) {
      console.log('   ‚úÖ Langue fran√ßaise trouv√©e:')
      console.log(`   Code: ${frResponse.value[0].LangCode}`)
      console.log(`   Description: ${frResponse.value[0].Description}`)
      console.log(`   RFC 3066: ${frResponse.value[0].LangCodeRfc3066}`)
      console.log(`   Install√©e: ${frResponse.value[0].Installed}`)
      console.log(`   Login activ√©: ${frResponse.value[0].EnabledForLogin}`)
    } else {
      console.log('   ‚ùå Langue fran√ßaise non trouv√©e')
    }
    
    // 7. V√©rification des langues utilis√©es dans le code
    console.log('\n\n‚úÖ 7. V√©rification des langues utilis√©es dans le code:\n')
    
    const usedLanguages = ['fr', 'en', 'da', 'it', 'pl', 'pt']
    console.log(`   Langues document√©es: ${usedLanguages.join(', ')}`)
    
    const availableInIFS = usedLanguages.filter(code => 
      response.value.some(l => l.LangCode === code)
    )
    
    const missingInIFS = usedLanguages.filter(code => 
      !response.value.some(l => l.LangCode === code)
    )
    
    console.log(`\n   ‚úÖ Disponibles dans IFS: ${availableInIFS.join(', ')}`)
    if (missingInIFS.length > 0) {
      console.log(`   ‚ùå Manquantes dans IFS: ${missingInIFS.join(', ')}`)
    }
    
    // 8. Recherche d'autres endpoints de langue
    console.log('\n\nüîç 8. Recherche d\'autres endpoints li√©s aux langues...\n')
    
    try {
      // Test IsoLanguage (codes ISO)
      const isoResponse = await client.get<IFSODataResponse<any>>(
        'PrintDialog.svc/IsoLanguageSet',
        { $top: '10' }
      )
      console.log(`   ‚úÖ IsoLanguageSet trouv√©: ${isoResponse.value.length} entr√©es`)
      console.log(`   Exemple: ${JSON.stringify(isoResponse.value[0], null, 2)}`)
    } catch (error: any) {
      console.log(`   ‚ùå IsoLanguageSet non disponible: ${error.message}`)
    }
    
    // 9. Recommandations
    console.log('\n\nüí° 9. RECOMMANDATIONS:\n')
    console.log('   1. Utiliser LanguageCode dans les requ√™tes d\'impression IFS')
    console.log('   2. Valider que le code langue existe avant l\'envoi')
    console.log('   3. Pr√©voir une langue par d√©faut (fr) en fallback')
    console.log('   4. Mapper les codes RFC 3066 pour l\'internationalisation frontend')
    console.log('   5. Documenter les langues support√©es par le layout (BEN_Boat_configuration_for_production.rdl)')
    
    console.log('\n\n‚úÖ === ANALYSE TERMIN√âE ===\n')
    
  } catch (error: any) {
    console.error('‚ùå Erreur lors de l\'analyse:', error.message)
    if (error.response) {
      console.error('   Response:', error.response.data)
    }
    process.exit(1)
  }
}

// Ex√©cution
analyzeLanguages()
